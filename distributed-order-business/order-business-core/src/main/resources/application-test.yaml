
spring:
  datasource:
    db:
      business_distributed_order_1:
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/business_distributed_order_1?serverTimezone=UTC&characterEncoding=UTF8
        username: root
        password: root
      business_distributed_order_2:
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/business_distributed_order_2?serverTimezone=UTC&characterEncoding=UTF8
        username: root
        password: root
      business_distributed_order_3:
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/business_distributed_order_3?serverTimezone=UTC&characterEncoding=UTF8
        username: root
        password: root
      business_distributed_order_4:
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/business_distributed_order_4?serverTimezone=UTC&characterEncoding=UTF8
        username: root
        password: root
      business_distributed_order_5:
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/business_distributed_order_5?serverTimezone=UTC&characterEncoding=UTF8
        username: root
        password: root
      business_distributed_order_6:
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/business_distributed_order_6?serverTimezone=UTC&characterEncoding=UTF8
        username: root
        password: root
      business_distributed_order_7:
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/business_distributed_order_7?serverTimezone=UTC&characterEncoding=UTF8
        username: root
        password: root
      business_distributed_order_8:
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/business_distributed_order_8?serverTimezone=UTC&characterEncoding=UTF8
        username: root
        password: root
    prop:
      sql.show: false
  redis:
    host: localhost
    port: 6379
    database: 0
  cloud:
    nacos:
      discovery:
        server-addr: localhost:8848
        namespace: 5a718b26-ebfc-4ebd-8f74-789b1f812621
  application:
    name: distributed-order-business
  main:
    allow-bean-definition-overriding: true
# mybatis config
mybatis-plus:
  mapper-locations: classpath:/mapper/*Mapper.xml
  type-aliases-package: cloud.tianai.order.business.dataobject
  global-config:
    db-config:
      #主键类型  0:"数据库ID自增", 1:"用户输入ID",2:"全局唯一ID (数字类型唯一ID)", 3:"全局唯一ID UUID";
      id-type: id_worker
  configuration:
    map-underscore-to-camel-case: true
rocketmq:
  order-sync:
    name-server: localhost:9876
    consumer-group: ORDER_SYNC_CONSUMER_GROUP
    topic: mysql_sync_event_topic
    consumer-thread-min: 64
    consumer-thread-max: 64
    # 要是匹配所有tag 则写 * ， 匹配多个tag 中间用 || 隔开， 例如 tagA || tagB || tagC
    tag: order_sync
order:
  sync:
    mq:
      # 使用商业版的rocketMQ， 填ons， 使用普通rocketMQ 填 rocketMQ或者不填
      type: rocketMQ
server:
  port: 8081
dubbo:
  protocol:
    name: dubbo
    port: -1
  registry:
    address: spring-cloud://localhost